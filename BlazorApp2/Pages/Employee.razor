@page "/employees"
@using BlazorApp2.Data
@inject EmployeeServices EmployeeService

<h2>Employee List</h2>

<table class="table">
    <thead>
        <tr>
            <th>Full Name</th>
            <th>Primary Email</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.FullName</td>
                <td>@primaryEmails[user.Id]</td> <!-- Access email using the user's Id -->
                <td>@(user.IsActive ? "Active" : "Inactive")</td>
                <td>
                    @if (user.IsActive)
                    {
                        <button class="btn btn-danger" @onclick="() => DeactivateEmployee(user)">Deactivate</button>
                    }
                    else
                    {
                        <button class="btn btn-success" @onclick="() => ActivateEmployee(user)">Activate</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<User> users = new List<User>();
    private Dictionary<int, string> primaryEmails = new Dictionary<int, string>(); // Assuming User.Id is an int

    protected override async Task OnInitializedAsync()
    {
        users = await EmployeeService.GetEmployeesAsync();
        foreach (var user in users)
        {
            var email = await EmployeeService.GetPrimaryEmailAsync(user); // Fetch the primary email
            primaryEmails[user.Id] = email; // Store it in the dictionary
        }
    }

    private async Task ActivateEmployee(User user)
    {
        user.IsActive = true;
        await EmployeeService.UpdateEmployeeAsync(user);
        // Optionally refresh the user list or individual user status
    }

    private async Task DeactivateEmployee(User user)
    {
        user.IsActive = false;
        await EmployeeService.UpdateEmployeeAsync(user);
        // Optionally refresh the user list or individual user status
    }
}
